syntax = "proto3";

package grpceventstore;

service EventStore {
  // Ping
  rpc Ping (EmptyDTO) returns (EmptyDTO);

  // Get a uuid
  rpc GetUid (EmptyDTO) returns (UidResponse);

  /////////////////////////////////
  // QUERIES TO THE ENTIRE STORE //
  /////////////////////////////////

  // Returns a live stream of events emitted as soon as they are stored.
  rpc SubscribeToStoreStream (stream EmptyDTO) returns (stream StoredEvent);
  // Returns a live stream of all the events stored after a certain one.
  // The server implementation should transparently switch to live events as soon as the old ones are sent.
  rpc CatchUpStoreStream (stream CatchUpStoreStreamRequest) returns (stream StoredEvent);
  // Returns an ending stream of events stored after a certain one, up to the moment of request.
  // Clients can specify a `limit` to receive just N events.
  rpc ReadStoreStreamForward (ReadStoreStreamForwardRequest) returns (stream StoredEvent);


  /////////////////////////
  // QUERIES TO A STREAM //
  /////////////////////////

  // Returns a live stream of events belonging to an aggregate stream, emitted as soon as they are stored.
  rpc SubscribeToStream (stream SubscribeToStreamRequest) returns (stream StoredEvent);
  // Returns a live stream of all events belonging to an aggregate stream and having a version number > than the provided one.
  // The server implementation should transparently switch to live events as soon as the old ones are sent.
  rpc CatchUpStream (stream CatchUpStreamRequest) returns (stream StoredEvent);
  // Returns an ending stream of all the events belonging to an aggregate, having a version number > than the provided one and stored before the time of request.
  // Clients can specify a `limit` to receive just N events.
  rpc ReadStreamForward (ReadStreamForwardRequest) returns (stream StoredEvent);



  //////////////////////////////////
  // QUERIES TO A STREAM CATEGORY //
  //////////////////////////////////

  // Returns a live stream of events belonging to the streams of aggregates of given types, emitted as soon as they are stored.
  rpc SubscribeToStreamsCategory (stream SubscribeToStreamCategoryRequest) returns (stream StoredEvent);
  // Returns a live stream of events belonging to the streams of aggregates of given types and stored after a given event.
  // The server implementation should transparently switch to live events as soon as the old ones are sent.
  rpc CatchUpStreamsCategory (stream CatchUpStreamsCategoryRequest) returns (stream StoredEvent);
  // Returns an ending stream of the events belonging to the streams of aggregates of given types, stored after a given event and before the time of request.
  // Clients can specify a `limit` to receive just N events.
  rpc ReadStreamsCategoryForward (ReadStreamsCategoryForwardRequest) returns (stream StoredEvent);


  ////////////////////////////
  // QUERIES BY EVENT TYPES //
  ////////////////////////////

  // Returns a live stream of events of certain types, emitted as soon as they are stored.
  rpc SubscribeToEventTypesStream (stream SubscribeToEventTypesStreamRequest) returns (stream StoredEvent);
  // Returns a live stream of events of certain types, stored after a given event.
  // The server implementation should transparently switch to live events as soon as the old ones are sent.
  rpc CatchUpEventTypesStream (stream CatchUpEventTypesStreamRequest) returns (stream StoredEvent);
  // Returns an ending stream of all the events of certain types stored after a given event and before the time of request.
  // Clients can specify a `limit` to receive just N events.
  rpc ReadEventTypesStreamForward (ReadEventTypesStreamForwardRequest) returns (stream StoredEvent);


  //////////////////////
  // WRITE PROCEDURES //
  //////////////////////

  // Attempts to write a list of events into a stream
  rpc WriteToStream (WriteToStreamRequest) returns (StoredEventsList);
  // Attempts to write N list of events into N aggregate streams
  rpc WriteToMultipleStreams (WriteToMultipleStreamsRequest) returns (StoredEventsList);
}

message EmptyDTO {}

message UidResponse {
  string uid = 1;
}

message Event {
  string type = 1;
  string data = 2;
}

message StoredEvent {
  sint64 id = 1;
  string type = 2;
  string stream = 3;
  string stored = 4;
  int32  versionNumber = 5;
  string data = 6;
  string transactionId = 8;
}


message CatchUpStoreStreamRequest {
  sint64 fromEventId = 1;
}
message ReadStoreStreamForwardRequest {
  sint64 fromEventId = 1;
  int32 limit = 2;
}

message SubscribeToStreamRequest {
  string stream = 1;
}
message CatchUpStreamRequest {
  string stream = 1;
  sint64 fromEventId = 2;
}
message ReadStreamForwardRequest {
  string stream = 1;
  sint64 fromEventId = 2;
  int32  limit = 3;
}

message SubscribeToStreamCategoryRequest {
  string streamCategory = 1;
}
message CatchUpStreamsCategoryRequest {
  string streamCategory = 1;
  sint64 fromEventId = 2;
}
message ReadStreamsCategoryForwardRequest {
  string streamCategory = 1;
  sint64 fromEventId = 2;
  int32  limit = 3;
}

message SubscribeToEventTypesStreamRequest {
  repeated string eventTypes = 1;
}
message CatchUpEventTypesStream {
  repeated string eventTypes = 1;
  sint64 fromEventId = 2;
}
message ReadEventTypesStreamForwardRequest {
  repeated string eventTypes = 1;
  sint64 fromEventId = 2;
  int32 limit = 3;
}

message WriteToStreamRequest {
  string stream = 1;
  int32 expectedVersion = 2;
  repeated Event events = 3;
}

message WriteToMultipleStreamsRequest {
  repeated WriteToStreamRequest writeRequests = 1;
}

message StoredEventsList {
  repeated StoredEvent events = 1;
}
