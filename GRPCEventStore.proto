syntax = "proto3";

package grpceventstore;

service EventStore {
  // Ping
  rpc Ping (EmptyDTO) returns (EmptyDTO);

  // Get a uuid
  rpc GetUniqueId (EmptyDTO) returns (UniqueIdResponse);

  /////////////////////////////////
  // QUERIES TO THE ENTIRE STORE //
  /////////////////////////////////

  // Returns a live stream of events emitted as soon as they are stored.
  rpc SubscribeToStore (stream EmptyDTO) returns (stream StoredEvent);
  // Returns a live stream of all the events stored after a certain one.
  // The server implementation should transparently switch to live events as soon as the old ones are sent.
  rpc CatchUpWithStore (stream CatchUpWithStoreRequest) returns (stream StoredEvent);
  // Returns an ending stream of events stored after a certain one, up to the moment of request.
  // Clients can specify a `limit` to receive just N events.
  rpc ReadStoreForward (ReadStoreForwardRequest) returns (stream StoredEvent);


  /////////////////////////
  // QUERIES TO A STREAM //
  /////////////////////////

  // Returns a live stream of events belonging to an aggregate stream, emitted as soon as they are stored.
  rpc SubscribeToStream (stream SubscribeToStreamRequest) returns (stream StoredEvent);
  // Returns a live stream of all events belonging to an aggregate stream and having a version number > than the provided one.
  // The server implementation should transparently switch to live events as soon as the old ones are sent.
  rpc CatchUpWithStream (stream CatchUpWithStreamRequest) returns (stream StoredEvent);
  // Returns an ending stream of all the events belonging to an aggregate, having a version number > than the provided one and stored before the time of request.
  // Clients can specify a `limit` to receive just N events.
  rpc ReadStreamForward (ReadStreamForwardRequest) returns (stream StoredEvent);



  ///////////////////////////////////////
  // QUERIES TO A CATEGORY OF STREAMS  //
  ///////////////////////////////////////

  // Returns a live stream of events belonging to the streams of aggregates of given types, emitted as soon as they are stored.
  rpc SubscribeToStreamsCategory (stream SubscribeToStreamsCategoryRequest) returns (stream StoredEvent);
  // Returns a live stream of events belonging to the streams of aggregates of given types and stored after a given event.
  // The server implementation should transparently switch to live events as soon as the old ones are sent.
  rpc CatchUpWithStreamsCategory (stream CatchUpWithStreamsCategoryRequest) returns (stream StoredEvent);
  // Returns an ending stream of the events belonging to the streams of aggregates of given types, stored after a given event and before the time of request.
  // Clients can specify a `limit` to receive just N events.
  rpc ReadStreamsCategoryForward (ReadStreamsCategoryForwardRequest) returns (stream StoredEvent);


  //////////////////////
  // WRITE PROCEDURES //
  //////////////////////

  // Attempts to write a list of events into a stream
  rpc AppendEventsToStream (AppendEventsToStreamRequest) returns (StoredEventsList);
  // Attempts to write N list of events into N aggregate streams
  rpc AppendEventsToMultipleStreams (AppendEventsToMultipleStreamsRequest) returns (StoredEventsList);
}

message EmptyDTO {}

message UniqueIdResponse {
  string uniqueId = 1;
}

message Event {
  string type = 1;
  string data = 2;
}

message StoredEvent {
  sint64 id = 1;
  string type = 2;
  string stream = 3;
  string storedOn = 4;
  int32  versionNumber = 5;
  string data = 6;
  string transactionId = 8;
}


message CatchUpWithStoreRequest {
  sint64 fromEventId = 1;
}
message ReadStoreForwardRequest {
  sint64 fromEventId = 1;
  int32 limit = 2;
}

message SubscribeToStreamRequest {
  string stream = 1;
}
message CatchUpWithStreamRequest {
  string stream = 1;
  sint64 fromVersionNumber = 2;
}
message ReadStreamForwardRequest {
  string stream = 1;
  sint64 fromVersionNumber = 2;
  int32  limit = 3;
}

message SubscribeToStreamsCategoryRequest {
  string streamsCategory = 1;
}
message CatchUpWithStreamsCategoryRequest {
  string streamsCategory = 1;
  sint64 fromEventId = 2;
}
message ReadStreamsCategoryForwardRequest {
  string streamsCategory = 1;
  sint64 fromEventId = 2;
  int32  limit = 3;
}

message AppendEventsToStreamRequest {
  string stream = 1;
  int32 expectedVersionNumber = 2;
  repeated Event events = 3;
}

message AppendEventsToMultipleStreamsRequest {
  repeated AppendEventsToStreamRequest appendRequests = 1;
}

message StoredEventsList {
  repeated StoredEvent events = 1;
}
